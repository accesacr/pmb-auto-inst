#!/bin/sh

set -e
error_msg() { printf "\033[31m%s\033[0m\n" "$*"; }
notice_msg() { printf "\033[33m%s\033[0m " "$*"; }
done_msg() { printf "\033[32m%s\033[0m\n" "$*"; }
DONE_MSG=$(done_msg done)

if [ $# -ne 3 ]
then
    cat >&2 <<EOUSAGE
Usage: $0 <UNIX-USER> <HOST> <INSTALLATION-DIRECTORY>
EOUSAGE
    exit 1
fi

UNIX_USER="$1"
HOST="$2"
DIRECTORY="$3"

misuse() {
  echo The variable $1 was not defined, and it should be.
  echo This script should not be run directly.
  exit 1
}

[ -z "$DEVELOPMENT_INSTALL" ] && misuse DEVELOPMENT_INSTALL

DB_NAME="fixmystreet"

# Check that the arguments we've been passed are sensible:

IP_ADDRESS_FOR_HOST="$(dig +short $HOST)"

if [ x = x"$IP_ADDRESS_FOR_HOST" ]
then
    error_msg "The hostname $HOST didn't resolve to an IP address"
    exit 1
fi

if ! id "$UNIX_USER" 2> /dev/null > /dev/null
then
    error_msg "The user '$UNIX_USER' didn't exist."
    exit 1
fi

if [ "$(whoami)" != "$UNIX_USER" ]
then
    error_msg "This script should be run by the user '$UNIX_USER'."
    exit 1
fi

REPOSITORY="$DIRECTORY/fixmystreet"
LINK_DESTINATION="$HOME/fixmystreet"

ln -sfn "$REPOSITORY" $LINK_DESTINATION
cd "$REPOSITORY"

if [ ! "$DEVELOPMENT_INSTALL" = true ]; then
    echo -n "Adding crontab... "
    # Add regularly scheduled tasks to cron:
    TEMPORARY_CRONTAB=$(mktemp)
    echo crontab file is $TEMPORARY_CRONTAB
    cp "$REPOSITORY"/conf/crontab-example "$TEMPORARY_CRONTAB"
    sed -i \
        -e 's,$FMS,'"$REPOSITORY,g" \
        -e 's,$LOCK_DIR,'"$DIRECTORY,g" \
        "$TEMPORARY_CRONTAB"
    crontab $TEMPORARY_CRONTAB
    echo $DONE_MSG
fi

# Install the compass gem locally - it's required for generating the
# CSS:
echo "Setting up CSS... "
export GEM_HOME="$DIRECTORY/gems"
mkdir -p "$GEM_HOME"
export GEM_PATH=
export PATH="$GEM_HOME/bin:$PATH"

if ! grep -q 'Set up local gem directory for FixMyStreet' $HOME/.bashrc; then
    cat >>$HOME/.bashrc <<EOBRC

# Set up local gem directory for FixMyStreet
export GEM_HOME="$DIRECTORY/gems"
export GEM_PATH=
export PATH="\$GEM_HOME/bin:\$PATH"
EOBRC
fi
echo "@ line 90 before gem install compass"
gem install --no-ri --no-rdoc compass
echo "@ line 92 after gem install compass"

# Use compass to generate the CSS, if it doesn't seem to already
# exist:
if [ ! -f web/cobrands/default/base.css ]
then
    bin/make_css
fi
echo $DONE_MSG

# Write sensible values into the config file, if it doesn't already exist
if [ ! -f conf/general.yml ]; then
    echo -n "Setting up default conf/general.yml file... "
    sed -r \
        -e "s,^( *FMS_DB_HOST:).*,\\1 ''," \
        -e "s,^( *FMS_DB_NAME:).*,\\1 '$DB_NAME'," \
        -e "s,^( *FMS_DB_USER:).*,\\1 '$UNIX_USER'," \
        -e "s,^( *BASE_URL:).*,\\1 'http://$HOST'," \
        -e "s,^( *EMAIL_DOMAIN:).*,\\1 '$HOST'," \
        -e "s,^( *CONTACT_EMAIL:).*,\\1 'help@$HOST'," \
        -e "s,^( *DO_NOT_REPLY_EMAIL:).*,\\1 'help@$HOST'," \
        conf/general.yml-example > conf/general.yml

    sed -i 's/cobrand1/pormibarriocr/g' conf/general.yml
    sed -i '/- cobrand2/d' conf/general.yml
    sed -i '/- cobrand3/d' conf/general.yml
    sed -i "/LANGUAGES:/a\  - 'es,Spanish,es_CR'" conf/general.yml

    # Next lines are for dev config (comment if not for dev)
    sed -i "/MAPIT_URL: ''/c\MAPIT_URL: 'http://localhost:3000/fakemapit/'" conf/general.yml
    sed -i "/BASE_URL: 'http://www.example.org'/d" conf/general.yml
    sed -i "/BASE_URL: 'http://127.0.0.1.xip.io'/d" conf/general.yml
    sed -i "/#   BASE_URL: 'http://localhost:3000'/c\BASE_URL: 'http://localhost:3000'" conf/general.yml
    
    # Lines below are for non-dev environments
    #sed -i "/MAPIT_URL: ''/c\MAPIT_URL: 'http://mapit.pormibarrio.uy'" conf/general.yml
    #sed -i "/MAPIT_TYPES: [ 'ZZZ' ]/c\MAPIT_TYPES: [ 'CAN' ]" conf/general.yml
    #sed -i "/MAPIT_ID_WHITELIST: []/c\MAPIT_ID_WHITELIST: [184, 228]" conf/general.yml
    
    echo $DONE_MSG
fi

echo "Installing required Perl modules - this may take some time"
cd "$REPOSITORY"
bin/install_perl_modules
echo $DONE_MSG

# Create the database if it doesn't exist:
echo -n "Setting up database... "
if ! psql -l | egrep "^ *$DB_NAME *\|" > /dev/null
then
    createdb --owner "$UNIX_USER" "$DB_NAME"
    echo 'CREATE LANGUAGE plpgsql;' | psql -U "$UNIX_USER" "$DB_NAME" || true
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/alert_types.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/generate_secret.sql

    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0001-add_sessions_and_users_and_dbic_fields.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0002-create_users_from_problems_and_link.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0003-create_users_from_alerts_and_link.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0004-create_users_from_comments_and_link.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0005-add_abuse_flags_to_users_and_reports.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0005-add_council_user_flag.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0006-alter_problem_state.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0007-add-comment-problem-state.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0008-add_user_object_to_admin_log.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0009-add_extra_to_problem.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0009-update_alerts_problem_state_queries.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0010-add_open311_conf.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0011-add_extra_to_contacts.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0012-add_gecode_column_to_problem.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0013-add_external_id_to_comment.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0013-add_send_method_column_to_open311conf.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0014-add_send_fail_columns_to_problem.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0015-add_extra_to_comment.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0015-add_send_method_used_column_to_problem.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0016-add_whensent_and_send_fail_to_comment.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0017-add_send_comments_to_open311conf.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0018-add_comment_user_to_open311conf.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0019-add_title_to_users.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0020-add_suppress_alerts_to_open311.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0021-add_external_source_columns_to_problem.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0022-add_interest_count_to_problems.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0023-add_can_be_devolved_and_category_config.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0024-add_non_public_categories_and_problems.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0025-add_more_statuses_to_problem.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0026-add_send_extended_comments_to_open311conf.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0027-add_sub_category_to_problem.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0028-add-bodies.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0029-add_deleted_flag_to_body.sql
    #psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0030-drop-action-log-check-constraint.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0031-add_social_sign_in_and_id_to_users.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0032-add_contacts_group.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0033-add_user_picture.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0034-add_users_created_modified_date.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0035-add_comment_new_category.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0036-problem_update_council.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0037-new-state-clarify.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0038-body-comptroller.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0039-group-color.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0040-task-table.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0041-problem-has_updates.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0042-overdues_alert_types.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0043-group_icon_name.sql
    psql -U "$UNIX_USER" "$DB_NAME" < "$REPOSITORY"/db/schema_0044-user_api_key.sql

else
    bin/cron-wrapper update-schema --commit
fi
echo $DONE_MSG

# Generate po and mo files (these invocations taken from Kagee's script):
echo "Creating locale .mo files"
bin/cron-wrapper bin/make_po FixMyStreet-EmptyHomes
bin/cron-wrapper bin/make_emptyhomes_welsh_po
commonlib/bin/gettext-makemo FixMyStreet
echo $DONE_MSG

bin/cron-wrapper update-all-reports

mkdir web/photos
